// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`legacy-config eslint should work successfully 1`] = `
[
  {
    "errorCount": 5,
    "fatalErrorCount": 0,
    "filePath": "<root>/file.ts",
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "messages": [
      {
        "column": 1,
        "endColumn": 25,
        "endLine": 1,
        "line": 1,
        "message": "Async function 'unsafeLog' has no 'await' expression.",
        "messageId": "missingAwait",
        "nodeType": "FunctionDeclaration",
        "ruleId": "@typescript-eslint/require-await",
        "severity": 2,
      },
      {
        "column": 37,
        "endColumn": 40,
        "endLine": 1,
        "line": 1,
        "message": "Unexpected any. Specify a different type.",
        "messageId": "unexpectedAny",
        "nodeType": "TSAnyKeyword",
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "suggestions": [
          {
            "desc": "Use \`unknown\` instead, this will force you to explicitly, and safely assert the type is correct.",
            "fix": {
              "range": [
                36,
                39,
              ],
              "text": "unknown",
            },
            "messageId": "suggestUnknown",
          },
          {
            "desc": "Use \`never\` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
            "fix": {
              "range": [
                36,
                39,
              ],
              "text": "never",
            },
            "messageId": "suggestNever",
          },
        ],
      },
      {
        "column": 17,
        "endColumn": 34,
        "endLine": 3,
        "line": 3,
        "message": "Unsafe call of an \`any\` typed value.",
        "messageId": "unsafeCall",
        "nodeType": "MemberExpression",
        "ruleId": "@typescript-eslint/no-unsafe-call",
        "severity": 2,
      },
      {
        "column": 23,
        "endColumn": 34,
        "endLine": 3,
        "line": 3,
        "message": "Unsafe member access .toUpperCase on an \`any\` value.",
        "messageId": "unsafeMemberExpression",
        "nodeType": "Identifier",
        "ruleId": "@typescript-eslint/no-unsafe-member-access",
        "severity": 2,
      },
      {
        "column": 3,
        "endColumn": 17,
        "endLine": 5,
        "line": 5,
        "message": "Unsafe return of an \`any[]\` typed value.",
        "messageId": "unsafeReturn",
        "nodeType": "ReturnStatement",
        "ruleId": "@typescript-eslint/no-unsafe-return",
        "severity": 1,
      },
      {
        "column": 1,
        "endColumn": 13,
        "endLine": 8,
        "line": 8,
        "message": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the \`void\` operator.",
        "messageId": "floatingVoid",
        "nodeType": "ExpressionStatement",
        "ruleId": "@typescript-eslint/no-floating-promises",
        "severity": 2,
        "suggestions": [
          {
            "desc": "Add void operator to ignore.",
            "fix": {
              "range": [
                139,
                139,
              ],
              "text": "void ",
            },
            "messageId": "floatingFixVoid",
          },
        ],
      },
    ],
    "source": "async function unsafeLog(...values: any[]) {
  for (const value of values) {
    console.log(value.toUpperCase());
  }
  return values;
}

unsafeLog();
",
    "suppressedMessages": [],
    "usedDeprecatedRules": [],
    "warningCount": 1,
  },
]
`;
